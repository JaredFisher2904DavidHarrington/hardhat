% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation.R
\name{validate_new_data_classes}
\alias{validate_new_data_classes}
\alias{check_new_data_classes}
\title{Ensure that \code{new_data} contains columns of the correct class}
\usage{
validate_new_data_classes(new_data, original_classes)

check_new_data_classes(new_data, original_classes)
}
\arguments{
\item{new_data}{A data frame of new predictors and possibly outcomes.}

\item{original_classes}{A named list of the original classes of either the
outcomes or predictors. The names should match the column names in
\code{new_data}, and the values are character vectors of the original class
for that column.}
}
\description{
validate - asserts the following:
\itemize{
\item The classes of the columns of \code{new_data} must be exactly the same
as the classes defined by \code{original_classes}.
}

check - returns the following:
\itemize{
\item \code{ok} A logical. Does the check pass?
\item \code{incorrect_columns} A character vector. The columns that contain the
wrong class.
}
}
\details{
This validation check is inspired by the base R functions
\code{\link[stats:.MFclass]{stats::.MFclass()}} and \code{\link[stats:checkMFClasses]{stats::checkMFClasses()}}, but is more strict. See
\code{\link[=get_data_classes]{get_data_classes()}} for more details.

\code{validate_new_data_classes()} assumes that all of the columns in
\code{original_classes} actually exist in \code{new_data}. Because of this,
if you use this function by itself you should call
\code{\link[=validate_new_data_column_names]{validate_new_data_column_names()}} first to safely validate that the
required columns actually exist.
}
\section{Validation}{


hardhat provides validation functions at three levels.
\itemize{
\item \code{check_*()}:  \emph{check a condition, and return a list}. The list
always contains at least one element, \code{ok}, a logical that specifies if the
check passed. Each check also has check specific elements in the returned
list that can be used to construct meaningful error messages.
\item \code{validate_*()}: \emph{check a condition, and error if it does not pass}. These
functions call their corresponding check function, and
then provide a default error message. If you, as a developer, want a
different error message, then call the \code{check_*()} function yourself,
and provide your own validation function.
\item \code{enforce_*()}: \emph{check a condition, modify the input with a warning
if the check fails, and return the modified input}. These functions are
used when user input is incorrect in some non-critical way, and you can
correct it automatically, with a warning.
}
}

\examples{

# ---------------------------------------------------------------------------
# Setup

train <- iris[1:100,]
test <- iris[101:150,]

# ---------------------------------------------------------------------------
# Example usage

original_classes <- get_data_classes(train)

# All good!
check_new_data_classes(test, original_classes)

bad_test <- test
bad_test$Species <- as.character(bad_test$Species)

# Species is incorrect!
check_new_data_classes(bad_test, original_classes)

# The error also tells you what the class is, and what it should be
\dontrun{
validate_new_data_classes(bad_test, original_classes)
}

}
\seealso{
Other validation functions: \code{\link{validate_new_data_column_names}},
  \code{\link{validate_outcomes_is_univariate}},
  \code{\link{validate_prediction_size}}
}
\concept{validation functions}
