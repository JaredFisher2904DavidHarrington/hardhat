% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation.R
\name{validate_new_data_column_names}
\alias{validate_new_data_column_names}
\alias{check_new_data_column_names}
\title{Ensure that \code{new_data} contains required column names}
\usage{
validate_new_data_column_names(new_data, original_names)

check_new_data_column_names(new_data, original_names)
}
\arguments{
\item{new_data}{A data frame of new predictors and possibly outcomes.}

\item{original_names}{A character vector. The original column names used
in training.}
}
\description{
validate - asserts the following:
\itemize{
\item The column names of \code{new_data} must contain all \code{original_names}.
}

check - returns the following:
\itemize{
\item \code{ok} A logical. Does the check pass?
\item \code{missing_names} A character vector. The missing column names.
}
}
\details{
A special error is thrown if the missing column is named \code{".outcome"}. This
only happens in the case where \code{\link[=mold]{mold()}} is called using the xy-method, and
a \emph{vector} \code{y} value is supplied rather than a data frame or matrix. In that
case, \code{y} is coerced to a data frame, and the automatic name \code{".outcome"} is
added, and this is what is looked for in \code{\link[=forge]{forge()}}. If this happens and the
user tries to request outcomes using \code{forge(..., outcomes = TRUE)} but
their \code{new_data} does not contain the required \code{".outcome"} column, a special
error is thrown telling them what to do. See the examples!
}
\section{Validation}{


hardhat provides validation functions at three levels.
\itemize{
\item \code{check_*()}:  \emph{check a condition, and return a list}. The list
always contains at least one element, \code{ok}, a logical that specifies if the
check passed. Each check also has check specific elements in the returned
list that can be used to construct meaningful error messages.
\item \code{validate_*()}: \emph{check a condition, and error if it does not pass}. These
functions call their corresponding check function, and
then provide a default error message. If you, as a developer, want a
different error message, then call the \code{check_*()} function yourself,
and provide your own validation function.
\item \code{enforce_*()}: \emph{check a condition, modify the input with a warning
if the check fails, and return the modified input}. These functions are
used when user input is incorrect in some non-critical way, and you can
correct it automatically, with a warning.
}
}

\examples{

# ---------------------------------------------------------------------------

original_names <- colnames(mtcars)

test <- mtcars
bad_test <- test[, -c(3, 4)]

# All good
check_new_data_column_names(test, original_names)

# Missing 2 columns
check_new_data_column_names(bad_test, original_names)

\dontrun{
# Will error
validate_new_data_column_names(bad_test, original_names)
}

# ---------------------------------------------------------------------------
# Special error when `.outcome` is missing

train <- iris[1:100,]
test <- iris[101:150,]

train_x <- subset(train, select = -Species)
train_y <- train$Species

# Here, y is a vector
processed <- mold(train_x, train_y)

# So the default column name is `".outcome"`
processed$outcomes

# It doesn't affect forge() normally
forge(processed$preprocessor, test)

# But if the outcome is requested, and `".outcome"`
# is not present in `new_data`, an error is thrown
# with very specific instructions
\dontrun{
forge(processed$preprocessor, test, outcomes = TRUE)
}

# To get this to work, just create an .outcome column in new_data
test$.outcome <- test$Species

forge(processed$preprocessor, test, outcomes = TRUE)

}
\seealso{
Other validation functions: \code{\link{validate_outcomes_is_univariate}}
}
\concept{validation functions}
