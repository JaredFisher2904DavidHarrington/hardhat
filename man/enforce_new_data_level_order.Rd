% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enforce.R
\name{enforce_new_data_level_order}
\alias{enforce_new_data_level_order}
\title{Check the level order of ordered factors}
\usage{
enforce_new_data_level_order(new_data, original_classes, original_levels)
}
\description{
An ordered factor in \code{new_data} might have levels in the incorrect order,
when compared with the original levels. This function checks for that, and
corrects the order, with a warning.
}
\details{
Ideally, this function is called after the following other validation
checks:
\itemize{
\item \code{\link[=validate_new_data_column_names]{validate_new_data_column_names()}}
\item \code{\link[=enforce_new_data_novel_levels]{enforce_new_data_novel_levels()}}
\item \code{\link[=enforce_new_data_level_recovery]{enforce_new_data_level_recovery()}}
}

If these are run first, then missing columns, novel levels, and missing
levels are all taken care of.

If these are not run first, \code{enforce_new_data_level_order()} can still be
used, and the following happens:
\itemize{
\item If an ordered factor specified in \code{original_classes} is not present
in \code{new_data}, then it is skipped silently.
\item If novel levels are detected compared to those in \code{original_levels},
they are moved to the end of the ordered factor, and the order of the
\code{original_levels} is restored up until the first novel level, with a
warning.
\item If missing levels are detected compared to those in \code{original_levels},
they are added back, and the order of \code{original_levels} is restored, with
a warning.
}
}
\examples{

# ---------------------------------------------------------------------------
# Setup

df <- data.frame(
  x = ordered(c("a", "b", "c"))
)

df_cls <- get_data_classes(df)
df_lvl <- get_levels(df)

# ---------------------------------------------------------------------------
# Bad level order

bad_order <- data.frame(
  x = ordered(c("a", "b", "c"), c("c", "b", "a"))
)

# The original order is restored
enforce_new_data_level_order(bad_order, df_cls, df_lvl)

# ---------------------------------------------------------------------------
# Too many levels, and bad order

too_many_and_wrong_order <- data.frame(
  x = ordered(c("a", "b", "d", "c"), levels = c("b", "a", "d", "c"))
)

# Novel levels are moved to the end
# and the original order is restored
too_many_fixed <- enforce_new_data_level_order(
  too_many_and_wrong_order,
  df_cls,
  df_lvl
)

levels(too_many_fixed$x)

# ---------------------------------------------------------------------------
# Not enough levels, and bad order

not_enough_and_wrong_order <- data.frame(
  x = ordered(c("a", "b"), levels = c("b", "a"))
)

# The missing level is added
# and the original order is restored
not_enough_fixed <- enforce_new_data_level_order(
  not_enough_and_wrong_order,
  df_cls,
  df_lvl
)

levels(not_enough_fixed$x)

}
