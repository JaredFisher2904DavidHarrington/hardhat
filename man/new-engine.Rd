% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/engine-formula.R, R/engine-recipe.R,
%   R/engine-xy.R, R/engine.R
\name{new_formula_engine}
\alias{new_formula_engine}
\alias{new_recipe_engine}
\alias{new_xy_engine}
\alias{new-engine}
\alias{new_engine}
\title{Create a new preprocessing engine}
\usage{
new_formula_engine(mold, forge, intercept = FALSE, info = NULL,
  formula = NULL, indicators = TRUE, ..., subclass = character())

new_recipe_engine(mold, forge, intercept = FALSE, info = NULL,
  recipe = NULL, ..., subclass = character())

new_xy_engine(mold, forge, intercept = FALSE, info = NULL, ...,
  subclass = character())

new_engine(mold, forge, intercept = FALSE, info = NULL, ...,
  subclass = character())
}
\arguments{
\item{mold}{A named list with two elements, \code{clean} and \code{process}, see
the \code{\link[=new_engine]{new_engine()}} section, Mold Functions, for details.}

\item{forge}{A named list with two elements, \code{clean} and \code{process}, see
the \code{\link[=new_engine]{new_engine()}} section, Forge Functions, for details.}

\item{intercept}{A logical. Should an intercept be included in the
processed data? This information is used by the \code{process} function
in the \code{mold} and \code{forge} function list.}

\item{info}{Either \code{NULL}, or a named list with 2 elements, \code{predictors}
and \code{outcomes}. \code{info} is generated automatically at \code{\link[=mold]{mold()}} time and
is used to validate \code{new_data} at prediction time. At \code{\link[=mold]{mold()}} time, the
information found in \code{engine$mold$process()$info} is used to set \code{info}
for the \code{engine}.}

\item{formula}{Either \code{NULL}, or a formula that specifies how the
predictors and outcomes should be preprocessed. This argument is set
automatically at \code{\link[=mold]{mold()}} time.}

\item{indicators}{A logical. Should factors be expanded into dummy variables?}

\item{...}{Name-value pairs for additional elements of engines that
subclass this engine.}

\item{subclass}{A character vector. The subclasses of this engine.}

\item{recipe}{Either \code{NULL}, or an unprepped recipe. This argument is set
automatically at \code{\link[=mold]{mold()}} time.}
}
\value{
A preprocessing engine, which is a list containing the inputs used as
arguments to the function, along with a class specific to the type
of engine being created.
}
\description{
These are the base classes for creating new preprocessing engines. All
engines inherit from the one created by \code{new_engine()}, and the default
method specific engines inherit from the other three here.

If you want to create your own processing engine for a specific method,
generally you will subclass one of the method specific engines here. If
you want to create a completely new preprocessing engine for a totally new
preprocessing method (i.e. not the formula, xy, or recipe method) then
you should subclass \code{new_engine()}.
}
\section{Mold Functions}{


\code{engine$mold} should be a named list with two elements, both of which
are functions:
\itemize{
\item \code{clean}: A function that performs initial cleaning of the user's input
data to be used in the model.
\itemize{
\item \emph{Arguments}:
\itemize{
\item If this is an xy engine, \code{engine}, \code{x} and \code{y}.
\item Otherwise, \code{engine} and \code{data}.
}
\item \emph{Output}: A named list of three elements:
\itemize{
\item \code{engine}: The engine, returned and potentially updated.
\item If using an xy engine:
\itemize{
\item \code{x}: The cleaned predictor data.
\item \code{y}: The cleaned outcome data.
}
\item If not using an xy engine:
\itemize{
\item \code{data}: The cleaned data.
}
}
}
\item \code{process}: A function that performs the actual preprocessing of the data.
\itemize{
\item \emph{Arguments}:
\itemize{
\item If this is an xy engine, \code{engine}, \code{x} and \code{y}.
\item Otherwise, \code{engine} and \code{data}.
}
\item \emph{Output}: A named list of 5 elements:
\itemize{
\item \code{engine}: The engine, returned and potentially updated.
\item \code{predictors}: A tibble of predictors.
\item \code{outcomes}: A tibble of outcomes.
\item \code{info}: A named list with 2 elements, \code{predictors} and \code{outcomes},
where both elements are themselves named lists of the following
3 elements:
\itemize{
\item \code{names}: A character vector of names of the original
predictors.
\item \code{classes}: A named list where the names are the original
predictors, and the values are the classes of that predictor.
\item \code{levels}: A named list where the names are the original
factor predictors, and the values are the levels of that
factor predictor.
}
\item \code{extras}: Varies based on the engine. If the engine has no
extra information, \code{NULL}. Otherwise a named list of the
extra elements returned by the engine.
}
}
}

Both \code{engine$mold$clean()} and \code{engine$mold$process()} will be called,
in order, from \code{\link[=mold]{mold()}}.
}

\section{Forge Functions}{


\code{engine$forge} should be a named list with two elements, both of which
are functions:
\itemize{
\item \code{clean}: A function that performs initial cleaning of \code{new_data}:
\itemize{
\item \emph{Arguments}:
\itemize{
\item \code{engine}, \code{new_data}, and \code{outcomes}.
}
\item \emph{Output}: A named list of two elements:
\itemize{
\item \code{engine}: The engine, returned and potentially updated.
\item \code{new_data}: The \code{new_data}, cleaned.
}
}
\item \code{process}: A function that performs the actual preprocessing of the data
using the known information in the \code{engine}.
\itemize{
\item \emph{Arguments}:
\itemize{
\item \code{engine}, \code{new_data}, and \code{outcomes}.
}
\item \emph{Output}: A named list of 4 elements:
\itemize{
\item \code{engine}: The engine, returned and potentially updated.
\item \code{predictors}: A tibble of the predictors.
\item \code{outcomes}: A tibble of the outcomes, or \code{NULL}.
\item \code{extras}: Varies based on the engine. If the engine has no
extra information, \code{NULL}. Otherwise a named list of the
extra elements returned by the engine.
}
}
}

Both \code{engine$forge$clean()} and \code{engine$forge$process()} will be called,
in order, from \code{\link[=forge]{forge()}}.
}

