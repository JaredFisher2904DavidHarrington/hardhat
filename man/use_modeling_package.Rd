% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use.R
\name{use_modeling_package}
\alias{use_modeling_package}
\alias{create_modeling_package}
\title{Create a modeling package}
\usage{
use_modeling_package(model)

create_modeling_package(path, model, fields = NULL,
  open = interactive())
}
\arguments{
\item{model}{A string. The name of the high level modeling function
that users will call. For example, \code{"linear_regression"}. This will be used
to populate the skeleton.}

\item{path}{A path. If it exists, it is used. If it does not exist,
it is created, provided that the parent path exists.}

\item{fields}{A named list of fields to add to DESCRIPTION,
potentially overriding default values. See \code{usethis::use_description()} for
how you can set personalized defaults using package options.}

\item{open}{If TRUE, activates the new project:
\itemize{
\item If RStudio desktop, the package is opened in a new session.
\item If on RStudio server, the current RStudio project is activated.
\item Otherwise, the working directory and active project is changed.
}}
}
\description{
\code{create_modeling_package()} will:
\itemize{
\item Call \code{usethis::create_package()} to set up a new R package.
\item Call \code{use_modeling_package()} to add a modeling package skeleton to it.
}

\code{use_modeling_package()} will:
\itemize{
\item Add hardhat and rlang to Imports
\item Add recipes to Suggests
\item If roxygen2 is available, uses roxygen markdown
\item Add a package documentation file
\item Generate and populate 7 files in \code{R/}:
\itemize{
\item \code{constructor.R}
\item \code{fit-bridge.R}
\item \code{fit-implementation.R}
\item \code{fit-interface.R}
\item \code{predict-bridge.R}
\item \code{predict-implementation.R}
\item \code{predict-interface.R}
}
}
}
