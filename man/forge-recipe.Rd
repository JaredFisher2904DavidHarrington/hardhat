% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forge.R
\name{forge.recipes_preprocessor}
\alias{forge.recipes_preprocessor}
\title{Forge - Recipes Method}
\usage{
\method{forge}{recipes_preprocessor}(preprocessor, new_data,
  outcomes = FALSE, ...)
}
\arguments{
\item{preprocessor}{A \code{"recipes_preprocessor"}.}

\item{new_data}{A data frame or matrix to preprocess.}

\item{outcomes}{A logical. Should the outcomes be processed and returned
as well?}

\item{...}{Not currently used.}
}
\value{
A named list with 3 elements:
\itemize{
\item \code{predictors}: A tibble containing the preprocessed
\code{new_data} predictors.
\item \code{outcomes}: If \code{outcomes = TRUE}, a tibble containing the preprocessed
\code{new_data} outcomes. Otherwise, \code{NULL}.
\item \code{offset}: If the \code{preprocessor} was a \code{"terms_preprocessor"}, and offsets
were specified in the formula, this is a tibble containing the preprocessed
offsets. Otherwise, \code{NULL}.
}
}
\description{
For the recipes preprocessor, \code{forge()} does the following:
\itemize{
\item Calls \code{\link[=shrink]{shrink()}} to trim \code{new_data} to only the required columns and
coerce \code{new_data} to a tibble.
\item Calls \code{\link[=scream]{scream()}} to perform validation on the structure of the columns
of \code{new_data}.
\item Calls \code{\link[recipes:bake]{recipes::bake()}} on the \code{new_data} using the prepped recipe
used during training.
\item Potentially adds an intercept column onto \code{new_data},
if the corresponding call to \code{\link[=mold]{mold()}} used one.
}
}
\examples{

library(recipes)

# ---------------------------------------------------------------------------
# Setup

train <- iris[1:100,]
test <- iris[101:150,]

# ---------------------------------------------------------------------------
# Recipes Example

# Create a recipe for the preprocessing
rec <- recipe(Sepal.Width ~ Sepal.Length + Species, iris) \%>\%
   step_log(Sepal.Length) \%>\%
   step_dummy(Species)

# Call mold() with the training data
processed <- mold(rec, train)

# Then, call forge() with the preprocessor and the test data
# to have it preprocess the test data in the same way
forge(processed$preprocessor, test)

# Use `outcomes = TRUE` to also extract the preprocessed outcome!
# This logged the Sepal.Length column of `new_data`
forge(processed$preprocessor, test, outcomes = TRUE)

}
