% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mold.R
\name{mold.data.frame}
\alias{mold.data.frame}
\alias{mold.matrix}
\title{Mold - XY Method}
\usage{
\method{mold}{data.frame}(x, y, intercept = FALSE, ...)

\method{mold}{matrix}(x, y, intercept = FALSE, ...)
}
\arguments{
\item{x}{A data frame or matrix containing the predictors.}

\item{y}{A data frame, matrix, or vector containing the outcome(s).}

\item{intercept}{A single logical specifying whether or not to
include an intercept in the molded predictors.}

\item{...}{Currently unused.}
}
\value{
A named list containing 3 elements:
\itemize{
\item \code{predictors}: A tibble containing the molded predictors to be used in the
model.
\item \code{outcome}: A tibble containing the molded outcomes to be used in the
model.
\item \code{preprocessor}: A \code{"preprocessor"} object for use when making predictions.
}
}
\description{
For a data frame / matrix, \code{mold()} does the following:
\itemize{
\item Converts \code{x} to a tibble.
\item Adds an intercept column to \code{x} if \code{intercept = TRUE}.
\item Runs \code{\link[=standardize]{standardize()}} on \code{y}.
}
}
\details{
As documented in \code{\link[=standardize]{standardize()}}, if \code{y} is a \emph{vector}, then the returned
outcomes tibble has 1 column with a standardized name of \code{".outcome"}.
}
\examples{
# ---------------------------------------------------------------------------
# XY Example

x <- iris[, c("Sepal.Width", "Species"), drop = FALSE]
y <- iris[, "Sepal.Length", drop = FALSE]

processed <- mold(x, y)

# The predictors are returned as a tibble
processed$predictors

# So are the outcomes
processed$outcomes

# A default preprocessor is also returned
# This contains all of the information required
# to preprocess new data at prediction time.
processed$preprocessor

# The preprocessor should be stored in the model object
# and is later used by forge()
forge(processed$preprocessor, iris)

# ---------------------------------------------------------------------------
# Y as a vector

# Often, `y` will be supplied as a vector to a model. `mold()` handles
# this by letting `standardize()` convert `y` to a tibble, adding the
# default column name, `".outcome"`.
y_vec <- y$Sepal.Length

mold(x, y_vec)$outcomes

}
