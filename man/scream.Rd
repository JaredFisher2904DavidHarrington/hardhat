% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scream.R
\name{scream}
\alias{scream}
\title{\if{html}{\Sexpr[stage=render,results=rd]{"\U0001f631"}} Scream.}
\usage{
scream(data, reference)
}
\arguments{
\item{data}{A data frame containing the new data to check the structure
of.}

\item{reference}{A data frame to cast \code{data} to.}
}
\value{
A tibble containing the required columns after any required structural
modifications have been made.
}
\description{
\code{scream()} ensures that the structure of \code{data} is the same as \code{reference}.
Under the hood, \code{\link[vctrs:vec_cast]{vctrs::vec_cast()}} is used, which casts each column of
\code{data} to the same type as the corresponding column in \code{reference}.

This casting enforces a number of important structural checks,
including but not limited to:
\itemize{
\item \emph{Data Classes} - Checks that the class of each column in \code{data} is the
same as the corresponding column in \code{reference}.
\item \emph{Novel Levels} - Checks that the factor columns in \code{data} don't have any
\emph{new} levels when compared with the \code{reference} columns. If there are new
levels, a warning is issued and they are coerced to \code{NA}.
\item \emph{Level Recovery} - Checks that the factor columns in \code{data} aren't
missing any factor levels when compared with the \code{reference} columns. If
there are missing levels, then they are restored.
}
}
\details{
\code{scream()} is called by \code{\link[=forge]{forge()}} after \code{\link[=shrink]{shrink()}} but before the
actual processing is done. Generally, you don't need to call \code{scream()}
directly, as \code{forge()} will do it for you.

If \code{scream()} is used as a standalone function, it is good practice to call
\code{\link[=shrink]{shrink()}} right before it as there are no checks in \code{scream()} that ensure
that all of the required column names actually exist in \code{data}. Those
checks exist in \code{shrink()}.
}
\examples{
train <- iris[1:100,]
test <- iris[101:150,]

# mold() is run at model fit time
# and a formula preprocessing engine is recorded
x <- mold(log(Sepal.Width) ~ Species, train)

# Inside the result of mold() are the reference tibbles
# for the predictors and the outcomes
ref_pred <- x$engine$info$predictors
ref_out <- x$engine$info$outcomes

# Pass that engine to shrink(), along with new_data
# to get a tibble of required predictors back
test_shrunk <- shrink(test, x$engine)

# Now pass that to scream() to perform validation checks
# Silence is key!
scream(test_shrunk, ref_pred)

# If `outcomes = TRUE` is used with shrink(),
# it should also be used with scream()
test_outcome <- shrink(test, x$engine, outcomes = TRUE)
scream(test_outcome, ref_out)

# scream() validates that the classes of `new_data`
# are the same as the ones used in mold(). The below call
# to scream() will fail with an informative error.
test2 <- test
test2$Species <- as.character(test2$Species)

\dontrun{
scream(test2, ref_pred)
}

}
